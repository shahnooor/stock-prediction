# -*- coding: utf-8 -*-
"""Xg_boost_final_covid.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nY_qme3_XCHkSLacjyakOgjhya9uWrW4
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import matplotlib.pyplot as plt
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from sklearn.metrics import mean_squared_error,mean_absolute_error

# Load specific forecasting tools
from statsmodels.tsa.arima_model import ARMA,ARMAResults,ARIMA,ARIMAResults
from statsmodels.graphics.tsaplots import plot_acf,plot_pacf # for determining (p,q) orders


# Ignore harmless warnings
import warnings
warnings.filterwarnings("ignore")
# %matplotlib inline



"""**cases forcast**"""

states_data = pd.read_csv('us_counties_covid19_daily.csv',parse_dates=['date'],index_col='date')
states_data.head()

fig = plt.figure(figsize=(15, 15))

ax1 = fig.add_subplot(221)
ax2 = fig.add_subplot(222)
ax1.plot( states_data['cases'], 'r', label="predictions")
ax2.plot(states_data['deaths'], 'b', label="actual")
ax2.set_xlabel("Time")
ax2.set_ylabel("deaths")
ax1.set_xlabel("Time")
ax1.set_ylabel("cases")
ax1.title.set_text("overall us cases for 2020 ")
ax2.title.set_text("overall us deaths for 2020  ")

states= {
    'Alabama': 'AL',
    'Alaska': 'AK',
    'Arizona': 'AZ',
    'Arkansas': 'AR',
    'California': 'CA',
    'Colorado': 'CO',
    'Connecticut': 'CT',
    'Delaware': 'DE',
    'District of Columbia': 'DC',
    'Florida': 'FL',
    'Georgia': 'GA',
    'Guam': 'GU',
    'Hawaii': 'HI',
    'Idaho': 'ID',
    'Illinois': 'IL',
    'Indiana': 'IN',
    'Iowa': 'IA',
    'Kansas': 'KS',
    'Kentucky': 'KY',
    'Louisiana': 'LA',
    'Maine': 'ME',
    'Maryland': 'MD',
    'Massachusetts': 'MA',
    'Michigan': 'MI',
    'Minnesota': 'MN',
    'Mississippi': 'MS',
    'Missouri': 'MO',
    'Montana': 'MT',
    'Nebraska': 'NE',
    'Nevada': 'NV',
    'New Hampshire': 'NH',
    'New Jersey': 'NJ',
    'New Mexico': 'NM',
    'New York': 'NY',
    'North Carolina': 'NC',
    'North Dakota': 'ND',
    'Northern Mariana Islands':'MP',
    'Ohio': 'OH',
    'Oklahoma': 'OK',
    'Oregon': 'OR',
    'Pennsylvania': 'PA',
    'Puerto Rico': 'PR',
    'Rhode Island': 'RI',
    'South Carolina': 'SC',
    'South Dakota': 'SD',
    'Tennessee': 'TN',
    'Texas': 'TX',
    'Utah': 'UT',
    'Vermont': 'VT',
    'Virgin Islands': 'VI',
    'Virginia': 'VA',
    'Washington': 'WA',
    'West Virginia': 'WV',
    'Wisconsin': 'WI',
    'Wyoming': 'WY'
}

for s in states:
  states_data[states_data.state==s].hist(bins=10, figsize=(20, 15))
plt.show()

states_data.info()

states_data.isnull().sum()

states_data= states_data.dropna(axis=0)
states_data.isnull().sum()

states_data= states_data.loc[(states_data['state'] == 'Washington') ]

states_data.head()

states_data.drop(['county', 'fips','deaths','state'], axis=1, inplace=True)

states_data.head()

states_data['cases'].fillna(0,inplace=True)

train_data, test_data = states_data[0:int(len(states_data)*0.90)], states_data[int(len(states_data)*0.90):]



from xgboost import XGBRegressor
classifier = XGBRegressor(max_depth=8, n_estimators=1000, random_state=0)
classifier.fit(train_data, train_data.cases)

x_pred = classifier.predict(train_data)
prediction1 = pd.DataFrame(x_pred)

plt.plot(train_data)
plt.title('actual cases')

plt.plot(prediction1)
plt.plot('predicted cases')

fig = plt.figure(figsize=(15, 15))

ax1 = fig.add_subplot(221)
ax2 = fig.add_subplot(222)
ax1.plot( prediction1, 'r', label="predictions")
ax2.plot(train_data, 'b', label="actual")
ax2.set_xlabel("Time")
ax2.set_ylabel("cases")
ax1.set_xlabel("Time")
ax1.set_ylabel("cases")
ax1.title.set_text("Xg boost predicted ")
ax2.title.set_text("Xg boost actual  ")



"""**death forecast by Xg boost**"""

states_data = pd.read_csv('us_counties_covid19_daily.csv',parse_dates=['date'],index_col='date')
states_data.head()

states_data= states_data.loc[(states_data['state'] == 'Washington') ]

states_data.drop(['county', 'fips','cases','state'], axis=1, inplace=True)

states_data.head()

states_data['deaths'].fillna(0,inplace=True)

train_data, test_data = states_data[0:int(len(states_data)*0.90)], states_data[int(len(states_data)*0.90):]



from xgboost import XGBRegressor
classifier = XGBRegressor(max_depth=8, n_estimators=1000, random_state=0)
classifier.fit(train_data, train_data.deaths)

x_pred = classifier.predict(train_data)
prediction1 = pd.DataFrame(x_pred)

plt.plot(train_data)
plt.title('actual deaths')

plt.plot(prediction1)
plt.title('predicted deaths')

fig = plt.figure(figsize=(15, 15))

ax1 = fig.add_subplot(221)
ax2 = fig.add_subplot(222)
ax1.plot( prediction1, 'r', label="predictions")
ax2.plot(train_data, 'b', label="actual")
ax2.set_xlabel("Time")
ax2.set_ylabel("deaths")
ax1.set_xlabel("Time")
ax1.set_ylabel("deaths")
ax1.title.set_text("Xg boost predicted ")
ax2.title.set_text("Xg boost actual  ")

from sklearn.metrics import mean_squared_error

mean_squared_error(train_data, prediction1, squared=False)