# -*- coding: utf-8 -*-
"""final_LSTM_stock_prediction_u.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qIcqxAP0OqaRHOLe_LfO774PBlOYT3to
"""



import yfinance as yf

# Commented out IPython magic to ensure Python compatibility.
#importing necessary libraries

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style('whitegrid')
plt.style.use("fivethirtyeight")
# %matplotlib inline

# For reading stock data from yahoo
from pandas_datareader.data import DataReader


# For time stamps
from datetime import datetime

# The tech stocks we'll use for this analysis
tech_list = ['META', 'AAPL', 'AMZN', 'NFLX', 'GOOG', 'MSFT', ]

# Set up End and Start times for data grab
tech_list = ['META', 'AAPL', 'AMZN', 'NFLX', 'GOOG', 'MSFT', ]

end = datetime.now()
start = datetime(end.year - 10, end.month, end.day)

for stock in tech_list:
    globals()[stock] = yf.download(stock, start, end)

company_list = [META, AAPL, AMZN, NFLX, GOOG, MSFT]
company_name = ["META", "APPLE","AMAZON", "NETFLIX", "GOOGLE", "MICROSOFT"]

for company, com_name in zip(company_list, company_name):
    company["company_name"] = com_name
    
df = pd.concat(company_list, axis=0)
df.sample(10)



for i, META in enumerate(company_list, 1):
    
    meta=pd.DataFrame(META['Open'])

meta.plot()

train_size = int(len(meta)*0.7)

train = meta.iloc[0:train_size]
test = meta.iloc[train_size:len(meta)]

from sklearn.model_selection import TimeSeriesSplit
tscv = TimeSeriesSplit(n_splits = 10)
rmse = []
for train_index, test_index in tscv.split(meta):
    train, test = meta.iloc[train_index], meta.iloc[test_index]

list(train.columns)

len(train), len(test)

def create_dataset(X, y, lag=1):
    xs,ys = [], []
    
    for i in range(len(X) - lag):
        tmp = X.iloc[i: i+lag].values
        xs.append(tmp)
        ys.append(y.iloc[i+lag])
    
    return np.array(xs), np.array(ys)

xtrain, ytrain = create_dataset(train, train.Open,10)
xtest, ytest = create_dataset(test, test.Open,10)

from keras.layers import LSTM
from keras.models import Sequential

from keras.layers.core import Dense, Activation, Dropout
model = Sequential()
model.add(LSTM(50,activation='relu', input_shape=(xtrain.shape[1], xtrain.shape[2])))
model.add(Dense(25))
model.add(Dense(1))
model.compile(loss="mean_squared_error", optimizer="adam")

model.fit(xtrain, ytrain,
         epochs=10,
         batch_size=10,
         verbose=1,
         shuffle=False
         )

ypred = model.predict(xtest)

plt.figure(figsize=(12,7))
plt.plot(np.arange(0, len(xtrain)), ytrain, 'g', label="history")
plt.plot(np.arange(len(xtrain), len(xtrain) + len(xtest)), ypred, 'r', label="predictions")
plt.plot(np.arange(len(xtrain), len(xtrain) + len(xtest)), ytest, 'b', label="Actual")
plt.xlabel("Time")
plt.ylabel("Price")
plt.title("META opening Predicted/ Actual Values against the Entire Timeframe")

from sklearn.metrics import mean_squared_error
mean_squared_error(ytest, ypred,squared=False)

fig = plt.figure(figsize=(15, 15))

ax1 = fig.add_subplot(221)
ax2 = fig.add_subplot(222)
ax1.plot( ypred, 'r', label="predictions")
ax2.plot(test, 'b', label="actual")
ax2.set_xlabel("Time")
ax2.set_ylabel(" Price")
ax1.set_xlabel("Time")
ax1.set_ylabel(" Price")
print(ypred)
print(test)

for i, META in enumerate(company_list, 1):
    
    meta=pd.DataFrame(META["Close"])
meta.head()

meta.plot()

train_size = int(len(meta)*0.7)

train = meta.iloc[0:train_size]
test = meta.iloc[train_size:len(meta)]

from sklearn.model_selection import TimeSeriesSplit
tscv = TimeSeriesSplit(n_splits = 10)
rmse = []
for train_index, test_index in tscv.split(meta):
    train, test = meta.iloc[train_index], meta.iloc[test_index]

xtrain, ytrain = create_dataset(train, train.Close,10)
xtest, ytest = create_dataset(test, test.Close,10)

model = Sequential()
model.add(LSTM(50,activation='relu', input_shape=(xtrain.shape[1], xtrain.shape[2])))
model.add(Dense(25))
model.add(Dense(1))
model.compile(loss="mean_squared_error", optimizer="adam")

model.fit(xtrain, ytrain,
         epochs=10,
         batch_size=10,
         verbose=1,
         shuffle=False
         )

ypred = model.predict(xtest)

plt.figure(figsize=(12,7))
plt.plot(np.arange(0, len(xtrain)), ytrain, 'g', label="history")
plt.plot(np.arange(len(xtrain), len(xtrain) + len(xtest)), ypred, 'r', label="predictions")
plt.plot(np.arange(len(xtrain), len(xtrain) + len(xtest)), ytest, 'b', label="Actual")
plt.xlabel("Time ---------------->")
plt.ylabel("Price ---------------->")
plt.title("META closing Predicted/ Actual Values against the Entire Timeframe")

from sklearn.metrics import mean_squared_error
mean_squared_error(ytest, ypred,squared=False)

test = meta.iloc[train_size+10:].copy()

plt.plot( ypred, 'r', label="predictions")
plt.plot( ytest, 'b', label="Actual")
plt.xlabel("Time")
plt.ylabel("Price")
plt.title("META  predition vs Actual closing price")

fig = plt.figure(figsize=(15, 15))

ax1 = fig.add_subplot(221)
ax2 = fig.add_subplot(222)
ax1.plot( ypred, 'r', label="predictions")
ax2.plot(test, 'b', label="actual")
ax2.set_xlabel("Time")
ax2.set_ylabel(" Price")
ax1.set_xlabel("Time")
ax1.set_ylabel(" Price")
print(ypred)
print(test)

for i, NFLX in enumerate(company_list, 1):
    
    NETFLIX=pd.DataFrame(NFLX['Open'])
NETFLIX.head()

NETFLIX.plot()

train_size = int(len(NETFLIX)*0.7)

train = NETFLIX.iloc[0:train_size]
test = NETFLIX.iloc[train_size:len(NETFLIX)]

xtrain, ytrain = create_dataset(train, train["Open"],10)
xtest, ytest = create_dataset(test, test["Open"],10)

model = Sequential()
model.add(LSTM(50,activation='relu', input_shape=(xtrain.shape[1], xtrain.shape[2])))
model.add(Dense(25))
model.add(Dense(1))
model.compile(loss="mean_squared_error", optimizer="adam")

model.fit(xtrain, ytrain,
         epochs=10,
         batch_size=10,
         verbose=1,
         shuffle=False
         )

ypred = model.predict(xtest)

plt.figure(figsize=(12,7))
plt.plot(np.arange(0, len(xtrain)), ytrain, 'g', label="history")
plt.plot(np.arange(len(xtrain), len(xtrain) + len(xtest)), ypred, 'r', label="predictions")
plt.plot(np.arange(len(xtrain), len(xtrain) + len(xtest)), ytest, 'b', label="Actual")
plt.xlabel("Time")
plt.ylabel("Price")
plt.title("NETFLIX opening Predicted/ Actual Values against the Entire Timeframe")

from sklearn.metrics import mean_squared_error
mean_squared_error(ytest, ypred,squared=False)

test = NETFLIX.iloc[train_size+10:].copy()

plt.plot( ypred, 'r', label="predictions")
plt.plot( ytest, 'b', label="Actual")
plt.xlabel("Time")
plt.ylabel("Price")
plt.title("NETLFIX predition vs Actual opening price")

fig = plt.figure(figsize=(15, 15))

ax1 = fig.add_subplot(221)
ax2 = fig.add_subplot(222)
ax1.plot( ypred, 'r', label="predictions")
ax2.plot(test, 'b', label="actual")
ax2.set_xlabel("Time")
ax2.set_ylabel(" Price")
ax1.set_xlabel("Time")
ax1.set_ylabel(" Price")
print(ypred)
print(test)

for i, NFLX in enumerate(company_list, 1):
    
    NETFLIX=pd.DataFrame(NFLX['Close'])
NETFLIX.head()

NETFLIX.plot()

train_size = int(len(NETFLIX)*0.7)

train = NETFLIX.iloc[0:train_size]
test = NETFLIX.iloc[train_size:len(NETFLIX)]

xtrain, ytrain = create_dataset(train, train["Close"],10)
xtest, ytest = create_dataset(test, test["Close"],10)

model = Sequential()
model.add(LSTM(50,activation='relu', input_shape=(xtrain.shape[1], xtrain.shape[2])))
model.add(Dense(25))
model.add(Dense(1))
model.compile(loss="mean_squared_error", optimizer="adam")

model.fit(xtrain, ytrain,
         epochs=10,
         batch_size=10,
         verbose=1,
         shuffle=False
         )

ypred = model.predict(xtest)

plt.figure(figsize=(12,7))
plt.plot(np.arange(0, len(xtrain)), ytrain, 'g', label="history")
plt.plot(np.arange(len(xtrain), len(xtrain) + len(xtest)), ypred, 'r', label="predictions")
plt.plot(np.arange(len(xtrain), len(xtrain) + len(xtest)), ytest, 'b', label="Actual")
plt.xlabel("Time")
plt.ylabel("Price")
plt.title("NETFLIX closing Predicted/ Actual Values against the Entire Timeframe")

from sklearn.metrics import mean_squared_error
mean_squared_error(ytest, ypred,squared=False)

test = NETFLIX.iloc[train_size+10:].copy()

plt.plot( ypred, 'r', label="predictions")
plt.plot( ytest, 'b', label="Actual")
plt.xlabel("Time")
plt.ylabel("Price")
plt.title("NETLFIX predition vs Actual closing price")

fig = plt.figure(figsize=(15, 15))

ax1 = fig.add_subplot(221)
ax2 = fig.add_subplot(222)
ax1.plot( ypred, 'r', label="predictions")
ax2.plot(test, 'b', label="actual")
ax2.set_xlabel("Time")
ax2.set_ylabel(" Price")
ax1.set_xlabel("Time")
ax1.set_ylabel(" Price")
print(ypred)
print(test)

for i, AAPL in enumerate(company_list, 1):
    
    apple=pd.DataFrame(AAPL['Open'])
apple.head()

apple.plot()

train_size = int(len(apple)*0.7)

train = apple.iloc[0:train_size]
test = apple.iloc[train_size:len(apple)]

xtrain, ytrain = create_dataset(train, train.Open,10)
xtest, ytest = create_dataset(test, test.Open,10)

model = Sequential()
model.add(LSTM(50,activation='relu', input_shape=(xtrain.shape[1], xtrain.shape[2])))
model.add(Dense(25))
model.add(Dense(1))
model.compile(loss="mean_squared_error", optimizer="adam")

model.fit(xtrain, ytrain,
         epochs=10,
         batch_size=10,
         verbose=1,
         shuffle=False
         )

ypred = model.predict(xtest)

plt.figure(figsize=(12,7))
plt.plot(np.arange(0, len(xtrain)), ytrain, 'g', label="history")
plt.plot(np.arange(len(xtrain), len(xtrain) + len(xtest)), ypred, 'r', label="predictions")
plt.plot(np.arange(len(xtrain), len(xtrain) + len(xtest)), ytest, 'b', label="Actual")
plt.xlabel("Time ")
plt.ylabel("Price ")
plt.title("APPLE opening Predicted/ Actual Values against the Entire Timeframe")

from sklearn.metrics import mean_squared_error
mean_squared_error(ytest, ypred,squared=False)

test = apple.iloc[train_size+10:].copy()

plt.plot( ypred, 'r', label="predictions")
plt.plot( ytest, 'b', label="Actual")
plt.xlabel("Time")
plt.ylabel("Price")
plt.title("apple predition vs Actual opening price")

fig = plt.figure(figsize=(15, 15))

ax1 = fig.add_subplot(221)
ax2 = fig.add_subplot(222)
ax1.plot( ypred, 'r', label="predictions")
ax2.plot(test, 'b', label="actual")
ax2.set_xlabel("Time")
ax2.set_ylabel(" Price")
ax1.set_xlabel("Time")
ax1.set_ylabel(" Price")
print(ypred)
print(test)

for i, AAPL in enumerate(company_list, 1):
    
    apple=pd.DataFrame(AAPL['Close'])
apple.head()

apple.plot()

train_size = int(len(apple)*0.7)

train = apple.iloc[0:train_size]
test = apple.iloc[train_size:len(apple)]

xtrain, ytrain = create_dataset(train, train.Close,10)
xtest, ytest = create_dataset(test, test.Close,10)

model = Sequential()
model.add(LSTM(50,activation='relu', input_shape=(xtrain.shape[1], xtrain.shape[2])))
model.add(Dense(25))
model.add(Dense(1))
model.compile(loss="mean_squared_error", optimizer="adam")

model.fit(xtrain, ytrain,
         epochs=10,
         batch_size=10,
         verbose=1,
         shuffle=False
         )

ypred = model.predict(xtest)

plt.figure(figsize=(12,7))
plt.plot(np.arange(0, len(xtrain)), ytrain, 'g', label="history")
plt.plot(np.arange(len(xtrain), len(xtrain) + len(xtest)), ypred, 'r', label="predictions")
plt.plot(np.arange(len(xtrain), len(xtrain) + len(xtest)), ytest, 'b', label="Actual")
plt.xlabel("Time ---------------->")
plt.ylabel("Price ---------------->")
plt.title("APPLE closing Predicted/ Actual Values against the Entire Timeframe")

from sklearn.metrics import mean_squared_error
mean_squared_error(ytest, ypred,squared=False)

test = apple.iloc[train_size+10:].copy()

plt.plot( ypred, 'r', label="predictions")
plt.plot( ytest, 'b', label="Actual")
plt.xlabel("Time ")
plt.ylabel("Price")
plt.title("Apple predition vs Actual closing price")

fig = plt.figure(figsize=(15, 15))

ax1 = fig.add_subplot(221)
ax2 = fig.add_subplot(222)
ax1.plot( ypred, 'r', label="predictions")
ax2.plot(test, 'b', label="actual")
ax2.set_xlabel("Time")
ax2.set_ylabel(" Price")
ax1.set_xlabel("Time")
ax1.set_ylabel(" Price")
print(ypred)
print(test)

for i, AMZN in enumerate(company_list, 1):
    
    amazon=pd.DataFrame(AMZN['Open'])
amazon.head()

amazon.plot()

train_size = int(len(amazon)*0.7)

train = amazon.iloc[0:train_size]
test = amazon.iloc[train_size:len(amazon)]

xtrain, ytrain = create_dataset(train, train.Open,10)
xtest, ytest = create_dataset(test, test.Open,10)

model = Sequential()
model.add(LSTM(50,activation='relu', input_shape=(xtrain.shape[1], xtrain.shape[2])))
model.add(Dense(25))
model.add(Dense(1))
model.compile(loss="mean_squared_error", optimizer="adam")

model.fit(xtrain, ytrain,
         epochs=10,
         batch_size=10,
         verbose=1,
         shuffle=False
         )

ypred = model.predict(xtest)

plt.figure(figsize=(12,7))
plt.plot(np.arange(0, len(xtrain)), ytrain, 'g', label="history")
plt.plot(np.arange(len(xtrain), len(xtrain) + len(xtest)), ypred, 'r', label="predictions")
plt.plot(np.arange(len(xtrain), len(xtrain) + len(xtest)), ytest, 'b', label="Actual")
plt.xlabel("Time")
plt.ylabel("Price")
plt.title("AMAZON opening Predicted/ Actual Values against the Entire Timeframe")

from sklearn.metrics import mean_squared_error
mean_squared_error(ytest, ypred,squared=False)

test = amazon.iloc[train_size+10:].copy()

plt.plot( ypred, 'r', label="predictions")
plt.plot( ytest, 'b', label="Actual")
plt.xlabel("Time ")
plt.ylabel("Price ")
plt.title("Amazon predition vs Actual opening price")

fig = plt.figure(figsize=(15, 15))

ax1 = fig.add_subplot(221)
ax2 = fig.add_subplot(222)
ax1.plot( ypred, 'r', label="predictions")
ax2.plot(test, 'b', label="actual")
ax2.set_xlabel("Time")
ax2.set_ylabel(" Price")
ax1.set_xlabel("Time")
ax1.set_ylabel(" Price")
print(ypred)
print(test)

for i, AMZN in enumerate(company_list, 1):
    
    amazon=pd.DataFrame(AMZN['Close'])
amazon.head()

amazon.plot()

train_size = int(len(amazon)*0.7)

train = amazon.iloc[0:train_size]
test = amazon.iloc[train_size:len(amazon)]

xtrain, ytrain = create_dataset(train, train.Close,10)
xtest, ytest = create_dataset(test, test.Close,10)

model = Sequential()
model.add(LSTM(50,activation='relu', input_shape=(xtrain.shape[1], xtrain.shape[2])))
model.add(Dense(25))
model.add(Dense(1))
model.compile(loss="mean_squared_error", optimizer="adam")

model.fit(xtrain, ytrain,
         epochs=10,
         batch_size=10,
         verbose=1,
         shuffle=False
         )

ypred = model.predict(xtest)

plt.figure(figsize=(12,7))
plt.plot(np.arange(0, len(xtrain)), ytrain, 'g', label="history")
plt.plot(np.arange(len(xtrain), len(xtrain) + len(xtest)), ypred, 'r', label="predictions")
plt.plot(np.arange(len(xtrain), len(xtrain) + len(xtest)), ytest, 'b', label="Actual")
plt.xlabel("Time ")
plt.ylabel("Price")
plt.title("Amazon closing Predicted/ Actual Values against the Entire Timeframe")

from sklearn.metrics import mean_squared_error
mean_squared_error(ytest, ypred,squared=False)

test = amazon.iloc[train_size+10:].copy()

plt.plot( ypred, 'r', label="predictions")
plt.plot( ytest, 'b', label="Actual")
plt.xlabel("Time ")
plt.ylabel("Price ")
plt.title("Amazon predition vs Actual closing price")

fig = plt.figure(figsize=(15, 15))

ax1 = fig.add_subplot(221)
ax2 = fig.add_subplot(222)
ax1.plot( ypred, 'r', label="predictions")
ax2.plot(test, 'b', label="actual")
ax2.set_xlabel("Time")
ax2.set_ylabel(" Price")
ax1.set_xlabel("Time")
ax1.set_ylabel(" Price")
print(ypred)
print(test)

for i, GOOG in enumerate(company_list, 1):
    
    google=pd.DataFrame(GOOG['Open'])
google.head()

google.plot()

train_size = int(len(google)*0.7)

train = google.iloc[0:train_size]
test = google.iloc[train_size:len(google)]

xtrain, ytrain = create_dataset(train, train.Open,10)
xtest, ytest = create_dataset(test, test.Open,10)

model = Sequential()
model.add(LSTM(50,activation='relu', input_shape=(xtrain.shape[1], xtrain.shape[2])))
model.add(Dense(25))
model.add(Dense(1))
model.compile(loss="mean_squared_error", optimizer="adam")

model.fit(xtrain, ytrain,
         epochs=10,
         batch_size=10,
         verbose=1,
         shuffle=False
         )

ypred = model.predict(xtest)

plt.figure(figsize=(12,7))
plt.plot(np.arange(0, len(xtrain)), ytrain, 'g', label="history")
plt.plot(np.arange(len(xtrain), len(xtrain) + len(xtest)), ypred, 'r', label="predictions")
plt.plot(np.arange(len(xtrain), len(xtrain) + len(xtest)), ytest, 'b', label="Actual")
plt.xlabel("Time ")
plt.ylabel("Price")
plt.title("Google opening Predicted/ Actual Values against the Entire Timeframe")

from sklearn.metrics import mean_squared_error
mean_squared_error(ytest, ypred,squared=False)

test = google.iloc[train_size+10:].copy()

plt.plot( ypred, 'r', label="predictions")
plt.plot( ytest, 'b', label="Actual")
plt.xlabel("Time")
plt.ylabel("Price ")
plt.title("Google predition vs Actual opening price")

fig = plt.figure(figsize=(15, 15))

ax1 = fig.add_subplot(221)
ax2 = fig.add_subplot(222)
ax1.plot( ypred, 'r', label="predictions")
ax2.plot(test, 'b', label="actual")
ax2.set_xlabel("Time")
ax2.set_ylabel(" Price")
ax1.set_xlabel("Time")
ax1.set_ylabel(" Price")
print(ypred)
print(test)

for i, GOOG in enumerate(company_list, 1):
    
    google=pd.DataFrame(GOOG['Close'])
google.head()

google.plot()

train_size = int(len(google)*0.7)

train = google.iloc[0:train_size]
test = google.iloc[train_size:len(google)]

xtrain, ytrain = create_dataset(train, train.Close,10)
xtest, ytest = create_dataset(test, test.Close,10)

model = Sequential()
model.add(LSTM(50,activation='relu', input_shape=(xtrain.shape[1], xtrain.shape[2])))
model.add(Dense(25))
model.add(Dense(1))
model.compile(loss="mean_squared_error", optimizer="adam")

model.fit(xtrain, ytrain,
         epochs=10,
         batch_size=10,
         verbose=1,
         shuffle=False
         )

ypred = model.predict(xtest)

plt.figure(figsize=(12,7))
plt.plot(np.arange(0, len(xtrain)), ytrain, 'g', label="history")
plt.plot(np.arange(len(xtrain), len(xtrain) + len(xtest)), ypred, 'r', label="predictions")
plt.plot(np.arange(len(xtrain), len(xtrain) + len(xtest)), ytest, 'b', label="Actual")
plt.xlabel("Time")
plt.ylabel("Price")
plt.title("Google closing Predicted/ Actual Values against the Entire Timeframe")

from sklearn.metrics import mean_squared_error
mean_squared_error(ytest, ypred,squared=False)

test = google.iloc[train_size+10:].copy()

plt.plot( ypred, 'r', label="predictions")
plt.plot( ytest, 'b', label="Actual")
plt.xlabel("Time")
plt.ylabel("Price")
plt.title("Google predition vs Actual closing price")

fig = plt.figure(figsize=(15, 15))

ax1 = fig.add_subplot(221)
ax2 = fig.add_subplot(222)
ax1.plot( ypred, 'r', label="predictions")
ax2.plot(test, 'b', label="actual")
ax2.set_xlabel("Time")
ax2.set_ylabel(" Price")
ax1.set_xlabel("Time")
ax1.set_ylabel(" Price")
print(ypred)
print(test)

for i, MSFT in enumerate(company_list, 1):
    
    microsoft=pd.DataFrame(MSFT['Open'])
microsoft.head()

microsoft.plot()

train_size = int(len(microsoft)*0.7)

train = microsoft.iloc[0:train_size]
test = microsoft.iloc[train_size:len(microsoft)]

xtrain, ytrain = create_dataset(train, train.Open,10)
xtest, ytest = create_dataset(test, test.Open,10)

model = Sequential()
model.add(LSTM(50,activation='relu', input_shape=(xtrain.shape[1], xtrain.shape[2])))
model.add(Dense(25))
model.add(Dense(1))
model.compile(loss="mean_squared_error", optimizer="adam")

model.fit(xtrain, ytrain,
         epochs=10,
         batch_size=10,
         verbose=1,
         shuffle=False
         )

ypred = model.predict(xtest)

plt.figure(figsize=(12,7))
plt.plot(np.arange(0, len(xtrain)), ytrain, 'g', label="history")
plt.plot(np.arange(len(xtrain), len(xtrain) + len(xtest)), ypred, 'r', label="predictions")
plt.plot(np.arange(len(xtrain), len(xtrain) + len(xtest)), ytest, 'b', label="Actual")
plt.xlabel("Time ")
plt.ylabel("Price")
plt.title("Microsoft opening Predicted/ Actual Values against the Entire Timeframe")

from sklearn.metrics import mean_squared_error
mean_squared_error(ytest, ypred,squared=False)

test = microsoft.iloc[train_size+10:].copy()

plt.plot( ypred, 'r', label="predictions")
plt.plot( ytest, 'b', label="Actual")
plt.xlabel("Time ")
plt.ylabel("Price ")
plt.title("Microsoft predition vs Actual opening price")

fig = plt.figure(figsize=(15, 15))

ax1 = fig.add_subplot(221)
ax2 = fig.add_subplot(222)
ax1.plot( ypred, 'r', label="predictions")
ax2.plot(test, 'b', label="actual")
ax2.set_xlabel("Time")
ax2.set_ylabel(" Price")
ax1.set_xlabel("Time")
ax1.set_ylabel(" Price")
print(ypred)
print(test)

for i, MSFT in enumerate(company_list, 1):
    
    microsoft=pd.DataFrame(MSFT['Close'])
microsoft.head()

microsoft.plot()

train_size = int(len(microsoft)*0.7)

train = microsoft.iloc[0:train_size]
test = microsoft.iloc[train_size:len(microsoft)]

xtrain, ytrain = create_dataset(train, train.Close,10)
xtest, ytest = create_dataset(test, test.Close,10)

model = Sequential()
model.add(LSTM(50,activation='relu', input_shape=(xtrain.shape[1], xtrain.shape[2])))
model.add(Dense(25))
model.add(Dense(1))
model.compile(loss="mean_squared_error", optimizer="adam")

model.fit(xtrain, ytrain,
         epochs=10,
         batch_size=10,
         verbose=1,
         shuffle=False
         )

ypred = model.predict(xtest)

plt.figure(figsize=(12,7))
plt.plot(np.arange(0, len(xtrain)), ytrain, 'g', label="history")
plt.plot(np.arange(len(xtrain), len(xtrain) + len(xtest)), ypred, 'r', label="predictions")
plt.plot(np.arange(len(xtrain), len(xtrain) + len(xtest)), ytest, 'b', label="Actual")
plt.xlabel("Time")
plt.ylabel("Price ")
plt.title("Microsoft closing Predicted/ Actual Values against the Entire Timeframe")

from sklearn.metrics import mean_squared_error
mean_squared_error(ytest, ypred,squared=False)

test = microsoft.iloc[train_size+10:].copy()

plt.plot( ypred, 'r', label="predictions")
plt.plot( ytest, 'b', label="Actual")
plt.xlabel("Time")
plt.ylabel("Price")
plt.title("Microsoft predition vs Actual closing price")

fig = plt.figure(figsize=(15, 15))

ax1 = fig.add_subplot(221)
ax2 = fig.add_subplot(222)
ax1.plot( ypred, 'r', label="predictions")
ax2.plot(test, 'b', label="actual")
ax2.set_xlabel("Time")
ax2.set_ylabel(" Price")
ax1.set_xlabel("Time")
ax1.set_ylabel(" Price")
print(ypred)
print(test)